use ml_rust::ml::facial_processing::FaceDetector;
use ml_rust::models::DetectedFaceOutput;

const TEST_DATA_DIR: &str = "./tests/assets/with_faces";

fn get_faces(detector: &FaceDetector, image_name: &str) -> Vec<DetectedFaceOutput> {
    let image_one = image::open(format!("{TEST_DATA_DIR}/{image_name}")).unwrap();
    let faces = detector.predict(&image_one);
    faces
}

#[test]
fn check_score_and_len() {
    let detector = FaceDetector::new(
        "/home/stepan/rust/projects/recognition_all/ml_rust/models/antelopev2/detection/model.onnx"
            .to_string(),
        "".to_string(),
    );

    let faces = get_faces(&detector, "test_face_1.jpg");
    assert_eq!(faces.len(), 1);
    assert!(faces[0].score >= 0.82);

    let faces = get_faces(&detector, "test_face_2.jpg");
    assert_eq!(faces.len(), 1);
    assert!(faces[0].score >= 0.76);

    let faces = get_faces(&detector, "test_face_3.jpg");
    assert_eq!(faces.len(), 2);
    let scores = vec![0.87, 0.78];
    for (f, s) in faces.iter().zip(scores) {
        assert!(f.score >= s)
    }

    let faces = get_faces(&detector, "test_face_4.jpg");
    assert_eq!(faces.len(), 100);
    let scores = vec![
        0.9160966, 0.9128263, 0.90469825, 0.9020642, 0.90175486, 0.90135336, 0.89967775, 0.8986585,
        0.898545, 0.89836794, 0.8981981, 0.8964777, 0.8942233, 0.8932645, 0.8929925, 0.89281154,
        0.8922291, 0.8913953, 0.8906647, 0.8900428, 0.8896903, 0.8882318, 0.88757837, 0.8875084,
        0.8872694, 0.8870522, 0.886725, 0.886423, 0.88634044, 0.8853054, 0.88515615, 0.8850486,
        0.8845856, 0.8843785, 0.88433313, 0.8836163, 0.8832313, 0.88184774, 0.8814097, 0.8811542,
        0.88037753, 0.8796785, 0.8791325, 0.87869555, 0.87865853, 0.87849844, 0.87828153,
        0.87814903, 0.8767645, 0.8761867, 0.87556005, 0.87526727, 0.874984, 0.8748682, 0.8745702,
        0.874274, 0.87406677, 0.8728328, 0.8715609, 0.87102646, 0.87052906, 0.87023866, 0.86919105,
        0.8686402, 0.86797273, 0.86762905, 0.8675606, 0.86749446, 0.8662777, 0.8652531, 0.86355776,
        0.86344576, 0.8631574, 0.8624656, 0.86227936, 0.8604137, 0.8598403, 0.8588845, 0.8581521,
        0.8580084, 0.85762894, 0.8575009, 0.8574791, 0.8547478, 0.8538755, 0.85313785, 0.8524555,
        0.8516456, 0.85059845, 0.8497621, 0.84973085, 0.8491284, 0.84566426, 0.84102404, 0.8397813,
        0.83944076, 0.83488935, 0.82998824, 0.8251419, 0.7765045,
    ];
    for (f, s) in faces.iter().zip(scores) {
        assert!(f.score >= s)
    }

    let faces = get_faces(&detector, "test_face_5.jpg");
    assert_eq!(faces.len(), 359);
    let scores = vec![
        0.878779, 0.86745346, 0.86610115, 0.8659153, 0.86397576, 0.8616322, 0.8615318, 0.8595979,
        0.8594111, 0.8587979, 0.8584373, 0.8582524, 0.8576646, 0.8560915, 0.85600096, 0.855374,
        0.8543114, 0.8530373, 0.8529091, 0.8528645, 0.8526196, 0.85221756, 0.85188055, 0.85177374,
        0.8513489, 0.850788, 0.8506911, 0.8502866, 0.8499701, 0.8486481, 0.8482874, 0.8475913,
        0.8468474, 0.8467095, 0.8460424, 0.8453448, 0.8451313, 0.8447808, 0.8447578, 0.84469736,
        0.8444371, 0.8442724, 0.8441124, 0.8440825, 0.84383583, 0.8437493, 0.843689, 0.84339666,
        0.8431603, 0.84275615, 0.84256005, 0.84215397, 0.84127736, 0.8406744, 0.8405802,
        0.84051996, 0.84047997, 0.8403511, 0.8393357, 0.83905613, 0.8389652, 0.83890104,
        0.83890015, 0.8386047, 0.8380531, 0.837842, 0.83744276, 0.8373656, 0.837206, 0.8368474,
        0.8361107, 0.8359779, 0.83569324, 0.8355129, 0.8346683, 0.8343352, 0.8336257, 0.8331133,
        0.8329536, 0.83287215, 0.832864, 0.8328309, 0.8326074, 0.83198524, 0.8316406, 0.8313825,
        0.83070123, 0.83067214, 0.8306538, 0.8303271, 0.82919884, 0.82900053, 0.8288542, 0.8286619,
        0.8284519, 0.82755613, 0.8275248, 0.827245, 0.82715404, 0.82651925, 0.8260318, 0.82597005,
        0.82585406, 0.825755, 0.8254493, 0.8253156, 0.82524776, 0.8251588, 0.82507, 0.8247413,
        0.8246962, 0.82458323, 0.82358336, 0.8232459, 0.8232043, 0.82294524, 0.8228158, 0.8227985,
        0.82268655, 0.8225334, 0.8223502, 0.82230014, 0.8220904, 0.8219826, 0.8219772, 0.8217298,
        0.8217045, 0.82133895, 0.8211881, 0.8210192, 0.8209039, 0.8207489, 0.82065797, 0.82062936,
        0.82060736, 0.8205752, 0.82031846, 0.8202249, 0.8198489, 0.81927335, 0.8191812, 0.8190851,
        0.81897545, 0.81882685, 0.8187381, 0.8185915, 0.81854445, 0.81834143, 0.8182739,
        0.81821895, 0.8180977, 0.8179524, 0.8179444, 0.8176427, 0.81702596, 0.8168063, 0.8167999,
        0.81671363, 0.81659937, 0.81654274, 0.8161067, 0.81564206, 0.81564105, 0.8156178,
        0.81528234, 0.8144047, 0.81390846, 0.8137311, 0.81371534, 0.813433, 0.8132163, 0.8129448,
        0.8128909, 0.81266487, 0.81253326, 0.8121269, 0.8120258, 0.81142193, 0.8111454, 0.8099488,
        0.80987847, 0.80942893, 0.80924475, 0.8090929, 0.8089855, 0.80895215, 0.8088708, 0.8084338,
        0.8083662, 0.8080859, 0.8079049, 0.806833, 0.80659235, 0.8065803, 0.80632985, 0.80583763,
        0.80527395, 0.80514395, 0.8049981, 0.8048384, 0.80422235, 0.8038193, 0.80365217, 0.8034469,
        0.80320287, 0.8030569, 0.80279744, 0.8025451, 0.8022164, 0.80161464, 0.80159986, 0.8015938,
        0.80139685, 0.80126643, 0.800981, 0.8007996, 0.80056965, 0.8005036, 0.80037093, 0.80032897,
        0.79998046, 0.79985744, 0.7996322, 0.7994094, 0.7993071, 0.7993057, 0.7992799, 0.79887295,
        0.79840386, 0.7981615, 0.79815483, 0.79795897, 0.7978413, 0.7976722, 0.79764014,
        0.79746765, 0.79692525, 0.796077, 0.7957926, 0.795688, 0.7954761, 0.7952565, 0.79467,
        0.79454684, 0.79436815, 0.7933712, 0.7933003, 0.79319525, 0.7929802, 0.79268765, 0.7924508,
        0.79207474, 0.79125667, 0.7911203, 0.79082996, 0.79074204, 0.7899115, 0.789816, 0.7895895,
        0.78923285, 0.78857535, 0.7879664, 0.78787524, 0.7876971, 0.7869772, 0.78640425, 0.7862482,
        0.7861117, 0.7861109, 0.7856797, 0.7856016, 0.78521705, 0.78488886, 0.7847514, 0.7841128,
        0.78361654, 0.7834933, 0.782691, 0.7823976, 0.7810947, 0.7808964, 0.78026056, 0.7798409,
        0.7795694, 0.77930045, 0.77689016, 0.7764153, 0.7761849, 0.7758157, 0.77556825, 0.77549756,
        0.7749653, 0.77425253, 0.77372086, 0.77371454, 0.7731087, 0.77293646, 0.7726908,
        0.77265286, 0.772201, 0.7719734, 0.7715477, 0.7714279, 0.77107507, 0.77096885, 0.7709587,
        0.77085936, 0.77085245, 0.7699373, 0.76988083, 0.7697051, 0.7695726, 0.7694324, 0.76932794,
        0.7684516, 0.76617754, 0.76508504, 0.76478446, 0.7629279, 0.7628098, 0.7627412, 0.7606307,
        0.76007175, 0.7598207, 0.75907207, 0.7589619, 0.7584752, 0.7578554, 0.75633824, 0.7551147,
        0.7532662, 0.7505734, 0.7499816, 0.74978083, 0.7486183, 0.7467276, 0.7426794, 0.73769283,
        0.7367407, 0.7333424, 0.73233813, 0.7308832, 0.72860885, 0.7262968, 0.7247843, 0.72312486,
        0.7197838, 0.7161502, 0.7130189, 0.70093405, 0.6957121, 0.6893265, 0.6868229, 0.6811612,
        0.6811453, 0.63167274, 0.5644318, 0.525218, 0.5056659,
    ];
    for (f, s) in faces.iter().zip(scores) {
        assert!(f.score >= s)
    }
}
